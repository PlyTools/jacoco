/*******************************************************************************
 * Copyright (c) 2009, 2018 Mountainminds GmbH & Co. KG and Contributors
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Marc R. Hoffmann - initial API and implementation
 *
 *******************************************************************************/
package org.jacoco.coverage;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-09-15")
public class CovStatus implements org.apache.thrift.TBase<CovStatus, CovStatus._Fields>, java.io.Serializable, Cloneable, Comparable<CovStatus> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CovStatus");

  private static final org.apache.thrift.protocol.TField M_COVERED_FIELD_DESC = new org.apache.thrift.protocol.TField("mCovered", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField M_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("mTotal", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CovStatusStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CovStatusTupleSchemeFactory();

  public int mCovered; // required
  public int mTotal; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    M_COVERED((short)1, "mCovered"),
    M_TOTAL((short)2, "mTotal");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // M_COVERED
          return M_COVERED;
        case 2: // M_TOTAL
          return M_TOTAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MCOVERED_ISSET_ID = 0;
  private static final int __MTOTAL_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.M_COVERED, new org.apache.thrift.meta_data.FieldMetaData("mCovered", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.M_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("mTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CovStatus.class, metaDataMap);
  }

  public CovStatus() {
  }

  public CovStatus(
    int mCovered,
    int mTotal)
  {
    this();
    this.mCovered = mCovered;
    setMCoveredIsSet(true);
    this.mTotal = mTotal;
    setMTotalIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CovStatus(CovStatus other) {
    __isset_bitfield = other.__isset_bitfield;
    this.mCovered = other.mCovered;
    this.mTotal = other.mTotal;
  }

  public CovStatus deepCopy() {
    return new CovStatus(this);
  }

  @Override
  public void clear() {
    setMCoveredIsSet(false);
    this.mCovered = 0;
    setMTotalIsSet(false);
    this.mTotal = 0;
  }

  public int getMCovered() {
    return this.mCovered;
  }

  public CovStatus setMCovered(int mCovered) {
    this.mCovered = mCovered;
    setMCoveredIsSet(true);
    return this;
  }

  public void unsetMCovered() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MCOVERED_ISSET_ID);
  }

  /** Returns true if field mCovered is set (has been assigned a value) and false otherwise */
  public boolean isSetMCovered() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MCOVERED_ISSET_ID);
  }

  public void setMCoveredIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MCOVERED_ISSET_ID, value);
  }

  public int getMTotal() {
    return this.mTotal;
  }

  public CovStatus setMTotal(int mTotal) {
    this.mTotal = mTotal;
    setMTotalIsSet(true);
    return this;
  }

  public void unsetMTotal() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MTOTAL_ISSET_ID);
  }

  /** Returns true if field mTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetMTotal() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MTOTAL_ISSET_ID);
  }

  public void setMTotalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MTOTAL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case M_COVERED:
      if (value == null) {
        unsetMCovered();
      } else {
        setMCovered((Integer)value);
      }
      break;

    case M_TOTAL:
      if (value == null) {
        unsetMTotal();
      } else {
        setMTotal((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case M_COVERED:
      return getMCovered();

    case M_TOTAL:
      return getMTotal();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case M_COVERED:
      return isSetMCovered();
    case M_TOTAL:
      return isSetMTotal();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CovStatus)
      return this.equals((CovStatus)that);
    return false;
  }

  public boolean equals(CovStatus that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_mCovered = true;
    boolean that_present_mCovered = true;
    if (this_present_mCovered || that_present_mCovered) {
      if (!(this_present_mCovered && that_present_mCovered))
        return false;
      if (this.mCovered != that.mCovered)
        return false;
    }

    boolean this_present_mTotal = true;
    boolean that_present_mTotal = true;
    if (this_present_mTotal || that_present_mTotal) {
      if (!(this_present_mTotal && that_present_mTotal))
        return false;
      if (this.mTotal != that.mTotal)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + mCovered;

    hashCode = hashCode * 8191 + mTotal;

    return hashCode;
  }

  @Override
  public int compareTo(CovStatus other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMCovered()).compareTo(other.isSetMCovered());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMCovered()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mCovered, other.mCovered);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMTotal()).compareTo(other.isSetMTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mTotal, other.mTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CovStatus(");
    boolean first = true;

    sb.append("mCovered:");
    sb.append(this.mCovered);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mTotal:");
    sb.append(this.mTotal);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CovStatusStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CovStatusStandardScheme getScheme() {
      return new CovStatusStandardScheme();
    }
  }

  private static class CovStatusStandardScheme extends org.apache.thrift.scheme.StandardScheme<CovStatus> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CovStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // M_COVERED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mCovered = iprot.readI32();
              struct.setMCoveredIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // M_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mTotal = iprot.readI32();
              struct.setMTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CovStatus struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(M_COVERED_FIELD_DESC);
      oprot.writeI32(struct.mCovered);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(M_TOTAL_FIELD_DESC);
      oprot.writeI32(struct.mTotal);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CovStatusTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CovStatusTupleScheme getScheme() {
      return new CovStatusTupleScheme();
    }
  }

  private static class CovStatusTupleScheme extends org.apache.thrift.scheme.TupleScheme<CovStatus> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CovStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetMCovered()) {
        optionals.set(0);
      }
      if (struct.isSetMTotal()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetMCovered()) {
        oprot.writeI32(struct.mCovered);
      }
      if (struct.isSetMTotal()) {
        oprot.writeI32(struct.mTotal);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CovStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.mCovered = iprot.readI32();
        struct.setMCoveredIsSet(true);
      }
      if (incoming.get(1)) {
        struct.mTotal = iprot.readI32();
        struct.setMTotalIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

