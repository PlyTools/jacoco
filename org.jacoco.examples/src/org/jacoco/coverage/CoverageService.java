/*******************************************************************************
 * Copyright (c) 2009, 2018 Mountainminds GmbH & Co. KG and Contributors
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Marc R. Hoffmann - initial API and implementation
 *
 *******************************************************************************/
package org.jacoco.coverage;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-09-15")
public class CoverageService {

  public interface Iface {

    public CovStatus getCoverage(String jarPath, java.nio.ByteBuffer executionData, boolean withHistory) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getCoverage(String jarPath, java.nio.ByteBuffer executionData, boolean withHistory, org.apache.thrift.async.AsyncMethodCallback<CovStatus> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public CovStatus getCoverage(String jarPath, java.nio.ByteBuffer executionData, boolean withHistory) throws org.apache.thrift.TException
    {
      send_getCoverage(jarPath, executionData, withHistory);
      return recv_getCoverage();
    }

    public void send_getCoverage(String jarPath, java.nio.ByteBuffer executionData, boolean withHistory) throws org.apache.thrift.TException
    {
      getCoverage_args args = new getCoverage_args();
      args.setJarPath(jarPath);
      args.setExecutionData(executionData);
      args.setWithHistory(withHistory);
      sendBase("getCoverage", args);
    }

    public CovStatus recv_getCoverage() throws org.apache.thrift.TException
    {
      getCoverage_result result = new getCoverage_result();
      receiveBase(result, "getCoverage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCoverage failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getCoverage(String jarPath, java.nio.ByteBuffer executionData, boolean withHistory, org.apache.thrift.async.AsyncMethodCallback<CovStatus> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCoverage_call method_call = new getCoverage_call(jarPath, executionData, withHistory, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCoverage_call extends org.apache.thrift.async.TAsyncMethodCall<CovStatus> {
      private String jarPath;
      private java.nio.ByteBuffer executionData;
      private boolean withHistory;
      public getCoverage_call(String jarPath, java.nio.ByteBuffer executionData, boolean withHistory, org.apache.thrift.async.AsyncMethodCallback<CovStatus> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jarPath = jarPath;
        this.executionData = executionData;
        this.withHistory = withHistory;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCoverage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCoverage_args args = new getCoverage_args();
        args.setJarPath(jarPath);
        args.setExecutionData(executionData);
        args.setWithHistory(withHistory);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CovStatus getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCoverage();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getCoverage", new getCoverage());
      return processMap;
    }

    public static class getCoverage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCoverage_args> {
      public getCoverage() {
        super("getCoverage");
      }

      public getCoverage_args getEmptyArgsInstance() {
        return new getCoverage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getCoverage_result getResult(I iface, getCoverage_args args) throws org.apache.thrift.TException {
        getCoverage_result result = new getCoverage_result();
        result.success = iface.getCoverage(args.jarPath, args.executionData, args.withHistory);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getCoverage", new getCoverage());
      return processMap;
    }

    public static class getCoverage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCoverage_args, CovStatus> {
      public getCoverage() {
        super("getCoverage");
      }

      public getCoverage_args getEmptyArgsInstance() {
        return new getCoverage_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<CovStatus> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<CovStatus>() { 
          public void onComplete(CovStatus o) {
            getCoverage_result result = new getCoverage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getCoverage_result result = new getCoverage_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCoverage_args args, org.apache.thrift.async.AsyncMethodCallback<CovStatus> resultHandler) throws org.apache.thrift.TException {
        iface.getCoverage(args.jarPath, args.executionData, args.withHistory,resultHandler);
      }
    }

  }

  public static class getCoverage_args implements org.apache.thrift.TBase<getCoverage_args, getCoverage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCoverage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCoverage_args");

    private static final org.apache.thrift.protocol.TField JAR_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("jarPath", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField EXECUTION_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("executionData", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField WITH_HISTORY_FIELD_DESC = new org.apache.thrift.protocol.TField("withHistory", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCoverage_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCoverage_argsTupleSchemeFactory();

    public String jarPath; // required
    public java.nio.ByteBuffer executionData; // required
    public boolean withHistory; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JAR_PATH((short)1, "jarPath"),
      EXECUTION_DATA((short)2, "executionData"),
      WITH_HISTORY((short)3, "withHistory");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JAR_PATH
            return JAR_PATH;
          case 2: // EXECUTION_DATA
            return EXECUTION_DATA;
          case 3: // WITH_HISTORY
            return WITH_HISTORY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WITHHISTORY_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JAR_PATH, new org.apache.thrift.meta_data.FieldMetaData("jarPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXECUTION_DATA, new org.apache.thrift.meta_data.FieldMetaData("executionData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.WITH_HISTORY, new org.apache.thrift.meta_data.FieldMetaData("withHistory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCoverage_args.class, metaDataMap);
    }

    public getCoverage_args() {
    }

    public getCoverage_args(
      String jarPath,
      java.nio.ByteBuffer executionData,
      boolean withHistory)
    {
      this();
      this.jarPath = jarPath;
      this.executionData = org.apache.thrift.TBaseHelper.copyBinary(executionData);
      this.withHistory = withHistory;
      setWithHistoryIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCoverage_args(getCoverage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetJarPath()) {
        this.jarPath = other.jarPath;
      }
      if (other.isSetExecutionData()) {
        this.executionData = org.apache.thrift.TBaseHelper.copyBinary(other.executionData);
      }
      this.withHistory = other.withHistory;
    }

    public getCoverage_args deepCopy() {
      return new getCoverage_args(this);
    }

    @Override
    public void clear() {
      this.jarPath = null;
      this.executionData = null;
      setWithHistoryIsSet(false);
      this.withHistory = false;
    }

    public String getJarPath() {
      return this.jarPath;
    }

    public getCoverage_args setJarPath(String jarPath) {
      this.jarPath = jarPath;
      return this;
    }

    public void unsetJarPath() {
      this.jarPath = null;
    }

    /** Returns true if field jarPath is set (has been assigned a value) and false otherwise */
    public boolean isSetJarPath() {
      return this.jarPath != null;
    }

    public void setJarPathIsSet(boolean value) {
      if (!value) {
        this.jarPath = null;
      }
    }

    public byte[] getExecutionData() {
      setExecutionData(org.apache.thrift.TBaseHelper.rightSize(executionData));
      return executionData == null ? null : executionData.array();
    }

    public java.nio.ByteBuffer bufferForExecutionData() {
      return org.apache.thrift.TBaseHelper.copyBinary(executionData);
    }

    public getCoverage_args setExecutionData(byte[] executionData) {
      this.executionData = executionData == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(executionData.clone());
      return this;
    }

    public getCoverage_args setExecutionData(java.nio.ByteBuffer executionData) {
      this.executionData = org.apache.thrift.TBaseHelper.copyBinary(executionData);
      return this;
    }

    public void unsetExecutionData() {
      this.executionData = null;
    }

    /** Returns true if field executionData is set (has been assigned a value) and false otherwise */
    public boolean isSetExecutionData() {
      return this.executionData != null;
    }

    public void setExecutionDataIsSet(boolean value) {
      if (!value) {
        this.executionData = null;
      }
    }

    public boolean isWithHistory() {
      return this.withHistory;
    }

    public getCoverage_args setWithHistory(boolean withHistory) {
      this.withHistory = withHistory;
      setWithHistoryIsSet(true);
      return this;
    }

    public void unsetWithHistory() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WITHHISTORY_ISSET_ID);
    }

    /** Returns true if field withHistory is set (has been assigned a value) and false otherwise */
    public boolean isSetWithHistory() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WITHHISTORY_ISSET_ID);
    }

    public void setWithHistoryIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WITHHISTORY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JAR_PATH:
        if (value == null) {
          unsetJarPath();
        } else {
          setJarPath((String)value);
        }
        break;

      case EXECUTION_DATA:
        if (value == null) {
          unsetExecutionData();
        } else {
          if (value instanceof byte[]) {
            setExecutionData((byte[])value);
          } else {
            setExecutionData((java.nio.ByteBuffer)value);
          }
        }
        break;

      case WITH_HISTORY:
        if (value == null) {
          unsetWithHistory();
        } else {
          setWithHistory((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JAR_PATH:
        return getJarPath();

      case EXECUTION_DATA:
        return getExecutionData();

      case WITH_HISTORY:
        return isWithHistory();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JAR_PATH:
        return isSetJarPath();
      case EXECUTION_DATA:
        return isSetExecutionData();
      case WITH_HISTORY:
        return isSetWithHistory();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCoverage_args)
        return this.equals((getCoverage_args)that);
      return false;
    }

    public boolean equals(getCoverage_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_jarPath = true && this.isSetJarPath();
      boolean that_present_jarPath = true && that.isSetJarPath();
      if (this_present_jarPath || that_present_jarPath) {
        if (!(this_present_jarPath && that_present_jarPath))
          return false;
        if (!this.jarPath.equals(that.jarPath))
          return false;
      }

      boolean this_present_executionData = true && this.isSetExecutionData();
      boolean that_present_executionData = true && that.isSetExecutionData();
      if (this_present_executionData || that_present_executionData) {
        if (!(this_present_executionData && that_present_executionData))
          return false;
        if (!this.executionData.equals(that.executionData))
          return false;
      }

      boolean this_present_withHistory = true;
      boolean that_present_withHistory = true;
      if (this_present_withHistory || that_present_withHistory) {
        if (!(this_present_withHistory && that_present_withHistory))
          return false;
        if (this.withHistory != that.withHistory)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetJarPath()) ? 131071 : 524287);
      if (isSetJarPath())
        hashCode = hashCode * 8191 + jarPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetExecutionData()) ? 131071 : 524287);
      if (isSetExecutionData())
        hashCode = hashCode * 8191 + executionData.hashCode();

      hashCode = hashCode * 8191 + ((withHistory) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(getCoverage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJarPath()).compareTo(other.isSetJarPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJarPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jarPath, other.jarPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExecutionData()).compareTo(other.isSetExecutionData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExecutionData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executionData, other.executionData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWithHistory()).compareTo(other.isSetWithHistory());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWithHistory()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.withHistory, other.withHistory);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCoverage_args(");
      boolean first = true;

      sb.append("jarPath:");
      if (this.jarPath == null) {
        sb.append("null");
      } else {
        sb.append(this.jarPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("executionData:");
      if (this.executionData == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.executionData, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("withHistory:");
      sb.append(this.withHistory);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCoverage_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCoverage_argsStandardScheme getScheme() {
        return new getCoverage_argsStandardScheme();
      }
    }

    private static class getCoverage_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCoverage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCoverage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JAR_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jarPath = iprot.readString();
                struct.setJarPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EXECUTION_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.executionData = iprot.readBinary();
                struct.setExecutionDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // WITH_HISTORY
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.withHistory = iprot.readBool();
                struct.setWithHistoryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCoverage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jarPath != null) {
          oprot.writeFieldBegin(JAR_PATH_FIELD_DESC);
          oprot.writeString(struct.jarPath);
          oprot.writeFieldEnd();
        }
        if (struct.executionData != null) {
          oprot.writeFieldBegin(EXECUTION_DATA_FIELD_DESC);
          oprot.writeBinary(struct.executionData);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(WITH_HISTORY_FIELD_DESC);
        oprot.writeBool(struct.withHistory);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCoverage_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCoverage_argsTupleScheme getScheme() {
        return new getCoverage_argsTupleScheme();
      }
    }

    private static class getCoverage_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCoverage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCoverage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetJarPath()) {
          optionals.set(0);
        }
        if (struct.isSetExecutionData()) {
          optionals.set(1);
        }
        if (struct.isSetWithHistory()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetJarPath()) {
          oprot.writeString(struct.jarPath);
        }
        if (struct.isSetExecutionData()) {
          oprot.writeBinary(struct.executionData);
        }
        if (struct.isSetWithHistory()) {
          oprot.writeBool(struct.withHistory);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCoverage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.jarPath = iprot.readString();
          struct.setJarPathIsSet(true);
        }
        if (incoming.get(1)) {
          struct.executionData = iprot.readBinary();
          struct.setExecutionDataIsSet(true);
        }
        if (incoming.get(2)) {
          struct.withHistory = iprot.readBool();
          struct.setWithHistoryIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCoverage_result implements org.apache.thrift.TBase<getCoverage_result, getCoverage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCoverage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCoverage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCoverage_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCoverage_resultTupleSchemeFactory();

    public CovStatus success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CovStatus.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCoverage_result.class, metaDataMap);
    }

    public getCoverage_result() {
    }

    public getCoverage_result(
      CovStatus success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCoverage_result(getCoverage_result other) {
      if (other.isSetSuccess()) {
        this.success = new CovStatus(other.success);
      }
    }

    public getCoverage_result deepCopy() {
      return new getCoverage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CovStatus getSuccess() {
      return this.success;
    }

    public getCoverage_result setSuccess(CovStatus success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CovStatus)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCoverage_result)
        return this.equals((getCoverage_result)that);
      return false;
    }

    public boolean equals(getCoverage_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getCoverage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCoverage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCoverage_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCoverage_resultStandardScheme getScheme() {
        return new getCoverage_resultStandardScheme();
      }
    }

    private static class getCoverage_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCoverage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCoverage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CovStatus();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCoverage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCoverage_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCoverage_resultTupleScheme getScheme() {
        return new getCoverage_resultTupleScheme();
      }
    }

    private static class getCoverage_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCoverage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCoverage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCoverage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CovStatus();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
